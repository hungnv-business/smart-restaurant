using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.Extensions.Logging;
using SmartRestaurant.Kitchen.Dtos;
using SmartRestaurant.Permissions;
using SmartRestaurant.Application.Contracts.Orders;
using SmartRestaurant.Application.Contracts.Orders.Dto;
using SmartRestaurant.Orders;
using Volo.Abp.Application.Services;

namespace SmartRestaurant.Kitchen
{
    /// <summary>
    /// Application Service for Kitchen Dashboard operations
    /// Handles cooking order management and priority calculation
    /// </summary>
    [Authorize(SmartRestaurantPermissions.Kitchen.Default)]
    public class KitchenDashboardAppService : ApplicationService, IKitchenDashboardAppService
    {
        private readonly KitchenPriorityManager _kitchenPriorityManager;
        private readonly IOrderNotificationService _notificationService;
        private readonly IOrderRepository _orderRepository;

        public KitchenDashboardAppService(
            KitchenPriorityManager kitchenPriorityManager,
            IOrderNotificationService notificationService,
            IOrderRepository orderRepository)
        {
            _kitchenPriorityManager = kitchenPriorityManager;
            _notificationService = notificationService;
            _orderRepository = orderRepository;
        }

        /// <summary>
        /// L·∫•y danh s√°ch m√≥n c·∫ßn n·∫•u ƒë∆∞·ª£c group theo b√†n
        /// Hi·ªÉn th·ªã theo format organized cho Kitchen Dashboard
        /// </summary>
        /// <returns>Danh s√°ch b√†n v·ªõi c√°c m√≥n c·∫ßn n·∫•u</returns>
        public virtual async Task<List<KitchenTableGroupDto>> GetCookingOrdersGroupedAsync()
        {
            Logger.LogInformation("Getting cooking orders grouped by table for kitchen dashboard");

            var groupedItems = await _kitchenPriorityManager.GetKitchenDashboardGroupedAsync();

            Logger.LogInformation("Found {ItemCount} items grouped into {TableCount} tables", 
                groupedItems.Sum(g => g.TotalItems), groupedItems.Count);
            
            return groupedItems;
        }


        /// <summary>
        /// C·∫≠p nh·∫≠t tr·∫°ng th√°i m√≥n ƒÉn t·ª´ kitchen dashboard
        /// Ch·ªâ cho ph√©p c·∫≠p nh·∫≠t c√°c tr·∫°ng th√°i li√™n quan ƒë·∫øn b·∫øp
        /// </summary>
        /// <param name="input">Th√¥ng tin c·∫≠p nh·∫≠t tr·∫°ng th√°i</param>
        [Authorize(SmartRestaurantPermissions.Kitchen.UpdateStatus)]
        public virtual async Task UpdateOrderItemStatusAsync(UpdateOrderItemStatusInput input)
        {
            Logger.LogInformation("Kitchen Dashboard updating OrderItem {OrderItemId} status to {Status}", 
                input.OrderItemId, input.Status);

            // S·ª≠ d·ª•ng KitchenPriorityManager ƒë·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i (kitchen-specific logic)
            await _kitchenPriorityManager.UpdateOrderItemStatusAsync(input.OrderItemId, input.Status);

            // G·ª≠i notification ƒë·∫øn mobile khi tr·∫°ng th√°i thay ƒë·ªïi
            await SendStatusUpdateNotification(input.OrderItemId, input.Status);

            Logger.LogInformation("Successfully updated OrderItem {OrderItemId} status to {Status}", 
                input.OrderItemId, input.Status);
        }

        /// <summary>
        /// G·ª≠i notification khi kitchen c·∫≠p nh·∫≠t tr·∫°ng th√°i m√≥n ƒÉn
        /// </summary>
        private async Task SendStatusUpdateNotification(Guid orderItemId, OrderItemStatus newStatus)
        {
            try
            {
                // L·∫•y th√¥ng tin order item t·ª´ t·∫•t c·∫£ orders
                var orders = await _orderRepository.GetListAsync();
                OrderItem? orderItem = null;
                Order? parentOrder = null;

                foreach (var order in orders)
                {
                    var item = order.OrderItems.FirstOrDefault(oi => oi.Id == orderItemId);
                    if (item != null)
                    {
                        orderItem = item;
                        parentOrder = order;
                        break;
                    }
                }

                if (orderItem == null || parentOrder == null)
                {
                    Logger.LogWarning("OrderItem {OrderItemId} not found for notification", orderItemId);
                    return;
                }

                // G·ª≠i notification t√πy theo tr·∫°ng th√°i
                switch (newStatus)
                {
                    case OrderItemStatus.Preparing:
                    case OrderItemStatus.Ready:
                        // G·ª≠i notification cho status updates kh√°c
                        await _notificationService.NotifyOrderItemStatusUpdatedAsync(orderItemId, (int)newStatus);
                        Logger.LogInformation("üîî Sent OrderItemStatusUpdated notification for {MenuItemName} status: {Status}", 
                            orderItem.MenuItemName, newStatus);
                        Console.WriteLine($"üîî KitchenDashboard: Sent status update for {orderItem.MenuItemName} to {newStatus}");
                        break;
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error sending notification for OrderItem {OrderItemId} status update", orderItemId);
                Console.WriteLine($"‚ùå KitchenDashboard: Error sending notification - {ex.Message}");
                // Don't throw - notification failure shouldn't block status update
            }
        }

        /// <summary>
        /// L·∫•y th·ªëng k√™ t·ªïng quan cho kitchen dashboard
        /// </summary>
        /// <returns>Th·ªëng k√™ cooking operations</returns>
        public virtual async Task<CookingStatsDto> GetCookingStatsAsync()
        {
            Logger.LogInformation("Getting cooking statistics for dashboard");

            var cookingItems = await _kitchenPriorityManager.GetPriorizedOrderItemsAsync();
            
            // Group by table ƒë·ªÉ t√≠nh EmptyTablesCount v√† LongestWaitingTable
            var tableGroups = cookingItems
                .GroupBy(item => item.TableNumber)
                .ToList();

            var stats = new CookingStatsDto
            {
                TotalCookingItems = cookingItems.Count,
                QuickCookItemsCount = cookingItems.Count(item => item.IsQuickCook),
                EmptyTablesCount = tableGroups.Count(group => group.Count() <= 1),
                AverageWaitingTime = cookingItems.Count > 0
                    ? cookingItems.Average(item => (DateTime.UtcNow - item.OrderTime).TotalMinutes)
                    : 0,
                HighPriorityItemsCount = cookingItems.Count(item => (DateTime.UtcNow - item.OrderTime).TotalMinutes > 20),
                CriticalItemsCount = cookingItems.Count(item => (DateTime.UtcNow - item.OrderTime).TotalMinutes > 30),
                HighestPriorityScore = cookingItems.Count > 0 ? cookingItems.Max(item => item.PriorityScore) : 0,
                LongestWaitingTable = cookingItems.Count > 0
                    ? tableGroups.OrderByDescending(group => group.Min(item => item.OrderTime))
                        .First().Key
                    : null
            };

            Logger.LogInformation("Cooking stats: Total={Total}, QuickCook={QuickCook}, EmptyTables={EmptyTables}", 
                stats.TotalCookingItems, stats.QuickCookItemsCount, stats.EmptyTablesCount);

            return stats;
        }
    }
}