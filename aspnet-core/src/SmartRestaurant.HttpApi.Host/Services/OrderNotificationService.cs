using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.SignalR;
using Volo.Abp.DependencyInjection;
using SmartRestaurant.Application.Contracts.Orders;
using SmartRestaurant.Application.Contracts.Orders.Dto;
using SmartRestaurant.HttpApi.Host.Hubs;
using SmartRestaurant.Orders;

namespace SmartRestaurant.HttpApi.Host.Services;

/// <summary>
/// ƒê∆°n gi·∫£n h√≥a OrderNotificationService - ch·ªâ g·ª≠i th√¥ng b√°o ƒë·∫øn Kitchen khi c√≥ order m·ªõi t·ª´ mobile
/// </summary>
public class OrderNotificationService : IOrderNotificationService, ITransientDependency
{
    private readonly IHubContext<KitchenHub> _kitchenHubContext;

    public OrderNotificationService(IHubContext<KitchenHub> kitchenHubContext)
    {
        _kitchenHubContext = kitchenHubContext;
    }

    public async Task NotifyNewOrderAsync(OrderDto orderDto)
    {
        try
        {
            Console.WriteLine($"üîî OrderNotificationService: Sending notification for order #{orderDto.OrderNumber}");

            // Ch·ªâ g·ª≠i th√¥ng b√°o ƒë·∫øn b·∫øp khi c√≥ order m·ªõi t·ª´ mobile
            await _kitchenHubContext.Clients.Group("Kitchen").SendAsync("NewOrderReceived", new
            {
                Order = orderDto,
                NotifiedAt = DateTime.UtcNow,
                Message = $"C√≥ ƒë∆°n h√†ng m·ªõi t·ª´ {orderDto.TableName}"
            });

            Console.WriteLine($"‚úÖ OrderNotificationService: Successfully sent notification for order #{orderDto.OrderNumber}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå OrderNotificationService: Error sending notification - {ex.Message}");
            Console.WriteLine($"‚ùå OrderNotificationService: Exception type: {ex.GetType().Name}");
            Console.WriteLine($"‚ùå OrderNotificationService: Stack trace: {ex.StackTrace}");
        }
    }

    // ƒê∆°n gi·∫£n h√≥a - kh√¥ng c·∫ßn c√°c method kh√°c, ch·ªâ c·∫ßn NotifyNewOrderAsync
    public async Task NotifyOrderStatusChangedAsync(Guid orderId, string orderNumber, OrderStatus newStatus, Guid? tableId = null)
    {
        // Kh√¥ng th·ª±c hi·ªán g√¨ - ƒë√£ ƒë∆°n gi·∫£n h√≥a
        await Task.CompletedTask;
    }

    public async Task NotifyOrderReadyAsync(OrderDto orderDto)
    {
        // Kh√¥ng th·ª±c hi·ªán g√¨ - ƒë√£ ƒë∆°n gi·∫£n h√≥a
        await Task.CompletedTask;
    }

    public async Task NotifyOrderServedAsync(OrderItemServedNotificationDto dto)
    {
        try
        {
            Console.WriteLine($"üîî OrderNotificationService: Sending order served notification for {dto.TableName}");

            await _kitchenHubContext.Clients.Group("Kitchen").SendAsync("OrderItemServed", new
            {
                dto.OrderId,
                dto.OrderNumber,
                dto.MenuItemName,
                dto.Quantity,
                dto.TableName,
                dto.TableId,
                ServedAt = DateTime.UtcNow,
                Message = $"{dto.TableName} {dto.Quantity} {dto.MenuItemName} ƒë√£ ƒë∆∞·ª£c ph·ª•c v·ª•"
            });

            Console.WriteLine($"‚úÖ OrderNotificationService: Successfully sent order served notification for {dto.TableName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå OrderNotificationService: Error sending order served notification - {ex.Message}");
        }
    }

    public async Task NotifyKitchenNewOrderAsync(OrderDto orderDto)
    {
        // G·ªçi l·∫°i NotifyNewOrderAsync ƒë·ªÉ tr√°nh duplicate code
        await NotifyNewOrderAsync(orderDto);
    }

    public async Task NotifyOrderItemStatusUpdatedAsync(Guid orderItemId, int newStatus)
    {
        try
        {
            Console.WriteLine($"üîî OrderNotificationService: Sending order item status update for {orderItemId} to status {newStatus}");

            await _kitchenHubContext.Clients.Group("Kitchen").SendAsync("OrderItemStatusUpdated", new
            {
                OrderItemId = orderItemId,
                NewStatus = newStatus,
                UpdatedAt = DateTime.UtcNow,
                Message = $"Tr·∫°ng th√°i m√≥n ƒÉn ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh {(OrderItemStatus)newStatus}"
            });

            Console.WriteLine($"‚úÖ OrderNotificationService: Successfully sent order item status update notification");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå OrderNotificationService: Error sending order item status update notification - {ex.Message}");
        }
    }

    public async Task NotifyOrderItemQuantityUpdatedAsync(OrderItemQuantityUpdateNotificationDto dto)
    {
        try
        {
            Console.WriteLine($"üîî OrderNotificationService: Sending quantity update notification for table {dto.TableName}");

            await _kitchenHubContext.Clients.Group("Kitchen").SendAsync("OrderItemQuantityUpdated", new
            {
                dto.TableName,
                dto.OrderItemId,
                dto.MenuItemName,
                dto.NewQuantity,
                UpdatedAt = DateTime.UtcNow,
                Message = $"{dto.TableName} ƒë√£ c·∫≠p nh·∫≠t {dto.MenuItemName} th√†nh {dto.NewQuantity}"
            });

            Console.WriteLine($"‚úÖ OrderNotificationService: Successfully sent quantity update notification for table {dto.TableName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå OrderNotificationService: Error sending quantity update notification - {ex.Message}");
        }
    }

    public async Task NotifyOrderItemsAddedAsync(OrderItemsAddedNotificationDto dto)
    {
        try
        {
            Console.WriteLine($"üîî OrderNotificationService: Sending add items notification for table {dto.TableName}");

            await _kitchenHubContext.Clients.Group("Kitchen").SendAsync("OrderItemsAdded", new
            {
                dto.TableName,
                dto.AddedItemsDetail,
                AddedAt = DateTime.UtcNow,
                Message = $"{dto.TableName} ƒë√£ th√™m {dto.AddedItemsDetail}"
            });

            Console.WriteLine($"‚úÖ OrderNotificationService: Successfully sent add items notification for table {dto.TableName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå OrderNotificationService: Error sending add items notification - {ex.Message}");
        }
    }

    public async Task NotifyOrderItemRemovedAsync(OrderItemRemovedNotificationDto dto)
    {
        try
        {
            Console.WriteLine($"üîî OrderNotificationService: Sending remove item notification for table {dto.TableName}");

            await _kitchenHubContext.Clients.Group("Kitchen").SendAsync("OrderItemRemoved", new
            {
                dto.TableName,
                dto.OrderItemId,
                dto.MenuItemName,
                dto.Quantity,
                RemovedAt = DateTime.UtcNow,
                Message = $"{dto.TableName} ƒë√£ x√≥a {dto.Quantity} {dto.MenuItemName}"
            });

            Console.WriteLine($"‚úÖ OrderNotificationService: Successfully sent remove item notification for table {dto.TableName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå OrderNotificationService: Error sending remove item notification - {ex.Message}");
        }
    }
}