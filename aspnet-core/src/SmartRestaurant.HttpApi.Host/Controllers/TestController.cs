using System;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.SignalR;
using SmartRestaurant.HttpApi.Host.Hubs;

namespace SmartRestaurant.HttpApi.Host.Controllers;

[ApiController]
[Route("api/[controller]")]
public class TestController : ControllerBase
{
    private readonly IHubContext<KitchenHub> _kitchenHubContext;

    public TestController(IHubContext<KitchenHub> kitchenHubContext)
    {
        _kitchenHubContext = kitchenHubContext;
    }

    [HttpPost("send-test-order")]
    public async Task<IActionResult> SendTestOrder()
    {
        try
        {
            Console.WriteLine("üß™ TestController: Sending test order notification with Vietnamese message");
            
            await _kitchenHubContext.Clients.Group("Kitchen").SendAsync("NewOrderReceived", new
            {
                Order = new
                {
                    OrderNumber = "TEST-001",
                    TableName = "B√†n Test"
                },
                NotifiedAt = DateTime.UtcNow,
                Message = "ƒê∆°n h√†ng m·ªõi s·ªë TEST-001 t·ª´ B√†n Test c·∫ßn chu·∫©n b·ªã ngay"
            });
            
            Console.WriteLine("‚úÖ TestController: Test Vietnamese message notification sent");
            return Ok("Test Vietnamese message notification sent");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå TestController: Error - {ex.Message}");
            return BadRequest($"Error: {ex.Message}");
        }
    }

    [HttpPost("send-test-quantity-update")]
    public async Task<IActionResult> SendTestQuantityUpdate()
    {
        try
        {
            Console.WriteLine("üß™ TestController: Sending test quantity update notification");
            
            await _kitchenHubContext.Clients.Group("Kitchen").SendAsync("OrderItemQuantityUpdated", new
            {
                OrderNumber = "TEST-002",
                OrderItemId = Guid.NewGuid(),
                NewQuantity = 3,
                UpdatedAt = DateTime.UtcNow,
                Message = "ƒê∆°n h√†ng TEST-002 ƒë√£ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng Ph·ªü B√≤ th√†nh 3 ph·∫ßn"
            });
            
            Console.WriteLine("‚úÖ TestController: Test Vietnamese quantity update notification sent");
            return Ok("Test Vietnamese quantity update notification sent");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå TestController: Error - {ex.Message}");
            return BadRequest($"Error: {ex.Message}");
        }
    }

    [HttpPost("send-test-add-items")]
    public async Task<IActionResult> SendTestAddItems()
    {
        try
        {
            Console.WriteLine("üß™ TestController: Sending test add items notification");
            
            await _kitchenHubContext.Clients.Group("Kitchen").SendAsync("OrderItemsAdded", new
            {
                OrderNumber = "TEST-003",
                ItemsCount = 2,
                AddedAt = DateTime.UtcNow,
                Message = "ƒê∆°n h√†ng TEST-003 ƒë√£ th√™m 2 m√≥n m·ªõi: B√∫n B√≤ Hu·∫ø v√† C∆°m T·∫•m"
            });
            
            Console.WriteLine("‚úÖ TestController: Test Vietnamese add items notification sent");
            return Ok("Test Vietnamese add items notification sent");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå TestController: Error - {ex.Message}");
            return BadRequest($"Error: {ex.Message}");
        }
    }

    [HttpPost("send-test-remove-item")]
    public async Task<IActionResult> SendTestRemoveItem()
    {
        try
        {
            Console.WriteLine("üß™ TestController: Sending test remove item notification");
            
            await _kitchenHubContext.Clients.Group("Kitchen").SendAsync("OrderItemRemoved", new
            {
                OrderNumber = "TEST-004",
                OrderItemId = Guid.NewGuid(),
                MenuItemName = "Ph·ªü B√≤",
                RemovedAt = DateTime.UtcNow,
                Message = "ƒê∆°n h√†ng TEST-004 ƒë√£ x√≥a m√≥n Ph·ªü B√≤ t√°i n·∫°m ra kh·ªèi order"
            });
            
            Console.WriteLine("‚úÖ TestController: Test Vietnamese remove item notification sent");
            return Ok("Test Vietnamese remove item notification sent");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"‚ùå TestController: Error - {ex.Message}");
            return BadRequest($"Error: {ex.Message}");
        }
    }
}