version: '3.8'

services:
  # PostgreSQL Database (Production)
  postgres:
    image: postgres:15
    container_name: smartrestaurant-postgres-prod
    environment:
      POSTGRES_DB: SmartRestaurant
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--locale=vi_VN.UTF-8 --encoding=UTF8"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./backup:/backup
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Redis Cache (Production)
  redis:
    image: redis:7-alpine
    container_name: smartrestaurant-redis-prod
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD}"
    volumes:
      - redis_data_prod:/data
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ABP Backend API (Production)
  api:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.api
      target: production
    container_name: smartrestaurant-api-prod
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__Default=User ID=${POSTGRES_USER};Password=${POSTGRES_PASSWORD};Host=postgres;Port=5432;Database=SmartRestaurant;
      - Redis__Configuration=redis:6379,password=${REDIS_PASSWORD}
      - App__SelfUrl=${API_BASE_URL}
      - App__CorsOrigins=${WEB_BASE_URL}
    depends_on:
      - postgres
      - redis
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Angular Frontend with Nginx (Production)
  web:
    build:
      context: ../../
      dockerfile: infrastructure/docker/Dockerfile.web
      target: production
    container_name: smartrestaurant-web-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - api
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  smartrestaurant-network:
    driver: bridge