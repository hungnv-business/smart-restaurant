# Multi-stage Dockerfile for Angular 19 Frontend

# Development stage (for docker-compose.dev.yml)
FROM node:20-alpine AS development
WORKDIR /app

# Copy package files
COPY angular/package*.json ./
COPY angular/yarn.lock ./

# Install dependencies
RUN yarn install

# Copy source code
COPY angular/ .

# Expose development port
EXPOSE 4200

# Start development server
CMD ["yarn", "start", "--host", "0.0.0.0", "--port", "4200"]

# Build stage
FROM node:20-alpine AS build
WORKDIR /app

# Copy package files
COPY angular/package*.json ./
COPY angular/yarn.lock ./

# Install dependencies
RUN yarn install --frozen-lockfile

# Copy source code
COPY angular/ .

# Build the application for production
RUN yarn build:prod

# Production stage with Nginx
FROM nginx:1.25-alpine AS production

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built Angular app
COPY --from=build /app/dist /usr/share/nginx/html

# Copy custom nginx configuration
COPY infrastructure/docker/nginx.conf /etc/nginx/nginx.conf

# Create nginx user and set permissions
RUN addgroup -g 1001 -S nginx && \
    adduser -S -D -H -u 1001 -h /var/cache/nginx -s /sbin/nologin -G nginx -g nginx nginx && \
    chown -R nginx:nginx /usr/share/nginx/html && \
    chown -R nginx:nginx /var/cache/nginx && \
    chmod -R 755 /usr/share/nginx/html

# Create log directories
RUN mkdir -p /var/log/nginx && \
    chown -R nginx:nginx /var/log/nginx

# Switch to non-root user
USER nginx

# Expose ports
EXPOSE 80 443

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]