# ---------- Build stage ----------
FROM node:20-alpine AS build
WORKDIR /app

RUN apk add --update python3 make g++ && rm -rf /var/cache/apk/*
RUN npm install -g node-gyp

# Cài deps
COPY angular/package*.json ./
RUN npm install --legacy-peer-deps

# Copy source
COPY angular/ .

# Sử dụng environment.devtest.ts cho cả dev và prod
RUN rm src/environments/environment.ts && \
    rm src/environments/environment.prod.ts && \
    cp src/environments/environment.devtest.ts src/environments/environment.ts && \
    cp src/environments/environment.devtest.ts src/environments/environment.prod.ts

# Build Angular production
RUN npm run build:prod

# ---------- Runtime stage ----------
FROM nginx:1.25-alpine AS production

# Dùng curl cho healthcheck
RUN apk add --no-cache curl

# Copy build ra Nginx
COPY --from=build /app/dist /usr/share/nginx/html

# Copy cấu hình Nginx của web container (HTTP only)
COPY infrastructure/docker/nginx-web-http.conf /etc/nginx/nginx.conf

# Chuẩn bị quyền cho Nginx
RUN mkdir -p /var/cache/nginx /var/run/nginx /var/log/nginx && \
    chown -R nginx:nginx /usr/share/nginx/html /var/cache/nginx /var/run/nginx /var/log/nginx && \
    chmod -R 755 /var/cache/nginx /var/run/nginx

EXPOSE 80

HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
  CMD curl -f http://localhost/health || exit 1

CMD ["/bin/sh", "-c", \
"env && \
echo FRONTEND_BASE_URL=[$FRONTEND_BASE_URL] && \
echo BACKEND_BASE_URL=[$BACKEND_BASE_URL] && \
echo REMOTE_SERVICE_BASE_URL=[$REMOTE_SERVICE_BASE_URL] && \
echo WEB_CLIENT_ID=[$WEB_CLIENT_ID] && \
sed -i s#MY_FRONTEND_BASE_URL#$FRONTEND_BASE_URL#g /usr/share/nginx/html/SmartRestaurant/main*.js && \
sed -i s#MY_BACKEND_BASE_URL#$BACKEND_BASE_URL#g /usr/share/nginx/html/SmartRestaurant/main*.js && \
sed -i s#MY_REMOTE_SERVICE_BASE_URL#$REMOTE_SERVICE_BASE_URL#g /usr/share/nginx/html/SmartRestaurant/main*.js && \
sed -i s#MY_WEB_CLIENT_ID#$WEB_CLIENT_ID#g /usr/share/nginx/html/SmartRestaurant/main*.js && \
nginx -g 'daemon off;'"]