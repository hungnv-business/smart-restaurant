services:
  # Nginx Reverse Proxy (Memory Optimized for 2GB VPS)
  nginx:
    image: nginx:alpine
    container_name: smartrestaurant_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /var/www/html:/var/www/html:ro
      - /opt/smartrestaurant/logs:/var/log/nginx
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    depends_on:
      - api
      - web
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # .NET API Backend (Optimized for 2GB RAM)
  api:
    image: ghcr.io/hungnv-business/smart-restaurant/api:production
    container_name: smartrestaurant_api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ConnectionStrings__Default=Host=postgres;Port=5432;Database=SmartRestaurant;Username=postgres;Password=${DB_PASSWORD}
      - App__SelfUrl=${BACKEND_BASE_URL}
      - App__ClientUrl=${FRONTEND_BASE_URL}
      - App__CorsOrigins=${FRONTEND_BASE_URL}
      - App__RedirectAllowedUrls=${FRONTEND_BASE_URL}
      - AuthServer__Authority=${BACKEND_BASE_URL}
      - AuthServer__RequireHttpsMetadata=${AUTH_REQUIRE_HTTPS}
      - AuthServer__SwaggerClientId=${SWAGGER_CLIENT_ID}
      - StringEncryption__DefaultPassPhrase=${ENCRYPTION_PASSPHRASE}
      - Serilog__MinimumLevel__Default=Warning
      - DOTNET_GCHeapHardLimit=400000000
    volumes:
      - /opt/smartrestaurant/logs:/app/logs
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 450M
        reservations:
          memory: 200M
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost/health || exit 1"]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # Angular Frontend (Production Build)
  web:
    image: ghcr.io/hungnv-business/smart-restaurant/web:production
    container_name: smartrestaurant_web
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    depends_on:
      - api
    deploy:
      resources:
        limits:
          memory: 128M
        reservations:
          memory: 64M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # PostgreSQL Database (Optimized for 2GB RAM)
  postgres:
    image: postgres:15-alpine
    container_name: smartrestaurant_postgres
    environment:
      POSTGRES_DB: SmartRestaurant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=vi_VN.UTF-8 --lc-ctype=vi_VN.UTF-8"
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - /opt/smartrestaurant/backups:/backups
      - /opt/smartrestaurant/logs:/var/log/postgresql
      - ./pg_hba.conf:/var/lib/postgresql/data/pg_hba.conf
      - ./postgresql.conf:/var/lib/postgresql/data/postgresql.conf
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 350M
        reservations:
          memory: 150M
    command: >
      postgres
      -c config_file=/var/lib/postgresql/data/postgresql.conf
      -c hba_file=/var/lib/postgresql/data/pg_hba.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d SmartRestaurant"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s


volumes:
  postgres_data_prod:
    driver: local

networks:
  smartrestaurant-network:
    driver: bridge