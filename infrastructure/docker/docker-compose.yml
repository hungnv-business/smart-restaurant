services:
  # Nginx Reverse Proxy (Memory Optimized for 2GB VPS)
  nginx:
    image: nginx:alpine
    container_name: smartrestaurant_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
      - /etc/letsencrypt/archive:/etc/letsencrypt/archive:ro
      - /var/www/html:/var/www/html:ro
      - /opt/smartrestaurant/logs:/var/log/nginx
    # Ép chạy root để Nginx có thể tạo các thư mục temp
    user: "0:0"
    # Tạo tmpfs cho cache & run (writable) → tránh lỗi permission
    tmpfs:
      - /var/cache/nginx
      - /var/run
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    depends_on:
      - api
      - web
    deploy:
      resources:
        limits:
          memory: 64M
        reservations:
          memory: 32M
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # .NET API Backend (Optimized for 2GB RAM)
  api:
    image: ghcr.io/hungnv-business/smart-restaurant/api:production
    pull_policy: always
    container_name: smartrestaurant_api
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:80
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true

      - ConnectionStrings__Default=Host=postgres;Port=5432;Database=SmartRestaurant;Username=postgres;Password=${DB_PASSWORD}

      - App__SelfUrl=${BACKEND_BASE_URL}
      - App__ClientUrl=${FRONTEND_BASE_URL}
      - RemoteServices__Default__BaseUrl=${REMOTE_SERVICE_BASE_URL}

      - AuthServer__Authority=${BACKEND_BASE_URL}
      - AuthServer__RequireHttpsMetadata=${AUTH_REQUIRE_HTTPS}
      - AuthServer__SwaggerClientId=${SWAGGER_CLIENT_ID}

      - StringEncryption__DefaultPassPhrase=${ENCRYPTION_PASSPHRASE}
      - Serilog__MinimumLevel__Default=Warning
    volumes:
      - /opt/smartrestaurant/logs:/app/logs
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    deploy:
      resources:
        limits:
          memory: 450M
        reservations:
          memory: 200M
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "wget --quiet --tries=1 --spider http://localhost/health || exit 1",
        ]
      interval: 30s
      timeout: 15s
      retries: 5
      start_period: 60s

  # Angular Frontend (Production Build) - HTTP Only
  web:
    image: ghcr.io/hungnv-business/smart-restaurant/web:production
    container_name: smartrestaurant_web
    environment:
      - FRONTEND_BASE_URL=${FRONTEND_BASE_URL}
      - BACKEND_BASE_URL=${BACKEND_BASE_URL}
      - REMOTE_SERVICE_BASE_URL=${REMOTE_SERVICE_BASE_URL}
      - WEB_CLIENT_ID=${WEB_CLIENT_ID}
    volumes:
      - ./nginx-web-http.conf:/etc/nginx/nginx.conf:ro
    user: "0:0"              # ép chạy root để không lỗi quyền
    tmpfs:
      - /var/cache/nginx     # nơi tạo client_temp
      - /var/run
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    depends_on:
      - api

  # PostgreSQL Database (Optimized for 2GB RAM)
  postgres:
    image: postgres:15-alpine
    container_name: smartrestaurant_postgres
    environment:
      POSTGRES_DB: SmartRestaurant
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      # Alpine: dùng C.UTF-8 để tránh lỗi locale
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --locale=C.UTF-8"
      # Đưa PGDATA vào subfolder để tránh va chạm file lạ trong /var/lib/postgresql/data
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      # Dữ liệu dùng named volume như bạn đang có
      - postgres_data_prod:/var/lib/postgresql/data
      # Backups/logs
      - /opt/smartrestaurant/backups:/backups
      - /opt/smartrestaurant/logs:/var/log/postgresql
      # Mount config ra ngoài PGDATA (read-only)
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf:ro
      - ./postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - smartrestaurant-network
    restart: unless-stopped
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 350M
        reservations:
          memory: 150M
    # Trỏ config file nằm ở /etc/postgresql thay vì trong data
    command: >
      postgres
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -h 127.0.0.1 -U postgres -d SmartRestaurant"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

volumes:
  postgres_data_prod:
    driver: local

networks:
  smartrestaurant-network:
    driver: bridge
