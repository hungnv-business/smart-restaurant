import 'package:dio/dio.dart';
import 'package:flutter/foundation.dart';
import '../constants/app_constants.dart';
import '../enums/restaurant_enums.dart';
import '../models/table_models.dart';
import '../models/menu_models.dart';
import '../models/order_request_models.dart';
import 'http_client_service.dart';

/// Service x·ª≠ l√Ω qu·∫£n l√Ω ƒë∆°n h√†ng v√† b√†n trong nh√† h√†ng
class OrderService extends ChangeNotifier {
  late Dio _dio;
  final HttpClientService _httpClientService;
  List<ActiveTableDto> _activeTables = [];
  bool _isLoading = false;
  String? _lastError;

  OrderService({required String? accessToken}) : _httpClientService = HttpClientService() {
    _dio = _httpClientService.dio;
  }

  // Getters
  List<ActiveTableDto> get activeTables => _activeTables;
  bool get isLoading => _isLoading;
  String? get lastError => _lastError;


  /// L·∫•y danh s√°ch t·∫•t c·∫£ b√†n active t·ª´ API
  Future<List<ActiveTableDto>> getActiveTables({
    String? tableNameFilter,
    TableStatus? statusFilter,
  }) async {
    try {
      _setLoading(true);
      _clearError();

      // Build query parameters
      final Map<String, dynamic> queryParams = {};
      if (tableNameFilter != null && tableNameFilter.isNotEmpty) {
        queryParams['tableNameFilter'] = tableNameFilter;
      }
      if (statusFilter != null) {
        queryParams['statusFilter'] = statusFilter.index;
      }

      final response = await _dio.get(
        '/api/app/order/active-tables',
        queryParameters: queryParams.isNotEmpty ? queryParams : null,
      );

      if (response.statusCode == 200 && response.data != null) {
        List<dynamic> data;
        
        // Handle ABP Framework response format: {"items": [...]}
        if (response.data is Map<String, dynamic> && 
            response.data.containsKey('items')) {
          data = response.data['items'] as List<dynamic>;
        } else if (response.data is List) {
          data = response.data;
        } else {
          data = [response.data];
        }
            
        _activeTables = data
            .map((json) => ActiveTableDto.fromJson(json))
            .toList();

        // S·∫Øp x·∫øp theo displayOrder
        _activeTables.sort((a, b) => a.displayOrder.compareTo(b.displayOrder));

        // Debug logging
        print('‚úÖ OrderService: Successfully loaded ${_activeTables.length} tables');
        for (final table in _activeTables) {
          print('ü™ë Table ${table.tableNumber} (${table.status.displayName}) in ${table.layoutSectionName ?? "No section"}');
        }

        return _activeTables;
      } else {
        throw OrderServiceException(
          message: 'Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server',
          statusCode: response.statusCode,
        );
      }
    } on DioException catch (e) {
      print('‚ùå OrderService: DioException - ${e.message}');
      if (e.response != null) {
        print('üìÑ Response status: ${e.response!.statusCode}');
        print('üìÑ Response data: ${e.response!.data}');
      }
      final exception = _handleDioException(e, 'l·∫•y danh s√°ch b√†n');
      _setError(exception.message);
      throw exception;
    } catch (e) {
      final message = 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y danh s√°ch b√†n: ${e.toString()}';
      _setError(message);
      throw OrderServiceException(
        message: message,
        errorCode: 'UNKNOWN_ERROR',
      );
    } finally {
      _setLoading(false);
    }
  }

  /// L·∫•y th√¥ng tin b√†n theo ID
  Future<ActiveTableDto?> getTableById(String tableId) async {
    try {
      final tables = await getActiveTables();
      return tables.firstWhere(
        (table) => table.id == tableId,
        orElse: () => throw OrderServiceException(
          message: 'Kh√¥ng t√¨m th·∫•y b√†n v·ªõi ID: $tableId',
          errorCode: 'TABLE_NOT_FOUND',
        ),
      );
    } catch (e) {
      if (e is OrderServiceException) rethrow;
      throw OrderServiceException(
        message: 'L·ªói khi t√¨m b√†n: ${e.toString()}',
        errorCode: 'UNKNOWN_ERROR',
      );
    }
  }

  /// L·∫•y danh s√°ch b√†n theo tr·∫°ng th√°i
  List<ActiveTableDto> getTablesByStatus(TableStatus status) {
    return _activeTables.where((table) => table.status == status).toList();
  }

  /// L·∫•y danh s√°ch b√†n theo khu v·ª±c
  List<ActiveTableDto> getTablesBySection(String? sectionId) {
    if (sectionId == null) {
      return _activeTables.where((table) => table.layoutSectionId == null).toList();
    }
    return _activeTables
        .where((table) => table.layoutSectionId == sectionId)
        .toList();
  }

  /// L·∫•y danh s√°ch b√†n c√≥ ƒë∆°n h√†ng ƒëang active
  List<ActiveTableDto> getTablesWithActiveOrders() {
    return _activeTables.where((table) => table.hasActiveOrders).toList();
  }

  /// L·∫•y danh s√°ch b√†n c√≥ m√≥n ch·ªù ph·ª•c v·ª•
  List<ActiveTableDto> getTablesWithPendingOrders() {
    return _activeTables.where((table) => table.pendingServeOrdersCount > 0).toList();
  }

  /// Refresh danh s√°ch b√†n
  Future<void> refreshTables() async {
    await getActiveTables();
  }

  /// L·∫•y danh s√°ch categories ƒëang ho·∫°t ƒë·ªông t·ª´ API
  /// Endpoint: GET /api/app/order/active-menu-categories
  Future<List<MenuCategory>> getActiveMenuCategories() async {
    try {
      _setLoading(true);
      _clearError();

      final response = await _dio.get('/api/app/order/active-menu-categories');

      if (response.statusCode == 200 && response.data != null) {
        List<dynamic> data;
        
        // Handle ABP Framework response format: {"items": [...]}
        if (response.data is Map<String, dynamic> && 
            response.data.containsKey('items')) {
          data = response.data['items'] as List<dynamic>;
        } else if (response.data is List) {
          data = response.data;
        } else {
          data = [response.data];
        }
            
        final categories = data
            .map((json) => MenuCategory.fromJson(json))
            .toList();

        print('‚úÖ OrderService: Successfully loaded ${categories.length} menu categories');
        for (final category in categories) {
          print('üçΩÔ∏è Category: ${category.displayName} (${category.id})');
        }

        return categories;
      } else {
        throw OrderServiceException(
          message: 'Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server khi l·∫•y danh m·ª•c',
          statusCode: response.statusCode,
        );
      }
    } on DioException catch (e) {
      print('‚ùå OrderService: DioException getting menu categories - ${e.message}');
      final exception = _handleDioException(e, 'l·∫•y danh m·ª•c m√≥n ƒÉn');
      _setError(exception.message);
      throw exception;
    } catch (e) {
      final message = 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y danh m·ª•c m√≥n ƒÉn: ${e.toString()}';
      _setError(message);
      throw OrderServiceException(
        message: message,
        errorCode: 'UNKNOWN_ERROR',
      );
    } finally {
      _setLoading(false);
    }
  }

  /// L·∫•y danh s√°ch m√≥n ƒÉn v·ªõi filtering cho vi·ªác t·∫°o ƒë∆°n h√†ng
  /// Endpoint: GET /api/app/order/menu-items-for-order
  Future<List<MenuItem>> getMenuItemsForOrder(GetMenuItemsForOrder input) async {
    try {
      _setLoading(true);
      _clearError();

      final response = await _dio.get(
        '/api/app/order/menu-items-for-order',
        queryParameters: input.toQueryParams(),
      );
      
      if (response.statusCode == 200 && response.data != null) {
        List<dynamic> data;
        
        // Handle ABP Framework response format: {"items": [...]}
        if (response.data is Map<String, dynamic> && 
            response.data.containsKey('items')) {
          data = response.data['items'] as List<dynamic>;
        } else if (response.data is List) {
          data = response.data;
        } else {
          data = [response.data];
        }
            
        final menuItems = data
            .map((json) => MenuItem.fromJson(json))
            .toList();

        return menuItems;
      } else {
        throw OrderServiceException(
          message: 'Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server khi l·∫•y danh s√°ch m√≥n ƒÉn',
          statusCode: response.statusCode,
        );
      }
    } on DioException catch (e) {
      final exception = _handleDioException(e, 'l·∫•y danh s√°ch m√≥n ƒÉn');
      _setError(exception.message);
      throw exception;
    } catch (e) {
      final message = 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi l·∫•y danh s√°ch m√≥n ƒÉn: ${e.toString()}';
      _setError(message);
      throw OrderServiceException(
        message: message,
        errorCode: 'UNKNOWN_ERROR',
      );
    } finally {
      _setLoading(false);
    }
  }

  /// Fallback categories n·∫øu API kh√¥ng th·ªÉ g·ªçi ƒë∆∞·ª£c
  List<MenuCategory> getFallbackCategories() {
    return const [
      MenuCategory(id: 'all', displayName: 'T·∫•t c·∫£'),
      MenuCategory(id: 'appetizer', displayName: 'Khai v·ªã'),
      MenuCategory(id: 'main', displayName: 'M√≥n ch√≠nh'),
      MenuCategory(id: 'drink', displayName: 'N∆∞·ªõc u·ªëng'),
      MenuCategory(id: 'dessert', displayName: 'Tr√°ng mi·ªáng'),
    ];
  }

  /// X·ª≠ l√Ω l·ªói t·ª´ Dio
  OrderServiceException _handleDioException(DioException e, String operation) {
    String message = 'L·ªói k·∫øt n·ªëi khi $operation';
    String? errorCode;

    if (e.response != null) {
      final statusCode = e.response!.statusCode;

      switch (statusCode) {
        case 400:
          message = 'Y√™u c·∫ßu kh√¥ng h·ª£p l·ªá khi $operation';
          errorCode = 'BAD_REQUEST';
          break;
        case 401:
          message = 'Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p ƒë·ªÉ $operation';
          errorCode = 'UNAUTHORIZED';
          break;
        case 403:
          message = 'B·ªã c·∫•m truy c·∫≠p ƒë·ªÉ $operation';
          errorCode = 'FORBIDDEN';
          break;
        case 404:
          message = 'Kh√¥ng t√¨m th·∫•y API ƒë·ªÉ $operation';
          errorCode = 'NOT_FOUND';
          break;
        case 500:
          message = 'L·ªói server khi $operation';
          errorCode = 'INTERNAL_SERVER_ERROR';
          break;
        default:
          message = 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi $operation (${statusCode})';
      }

      // Try to get error details from response
      if (e.response!.data != null) {
        try {
          final errorData = e.response!.data;
          if (errorData is Map) {
            if (errorData['message'] != null) {
              message = errorData['message'];
            } else if (errorData['error'] != null) {
              message = errorData['error'];
            }
          }
        } catch (_) {
          // Ignore parsing errors
        }
      }
    } else {
      // Network error
      switch (e.type) {
        case DioExceptionType.connectionTimeout:
          message = 'Timeout k·∫øt n·ªëi khi $operation - Ki·ªÉm tra m·∫°ng';
          errorCode = 'CONNECTION_TIMEOUT';
          break;
        case DioExceptionType.receiveTimeout:
          message = 'Timeout nh·∫≠n d·ªØ li·ªáu khi $operation';
          errorCode = 'RECEIVE_TIMEOUT';
          break;
        case DioExceptionType.sendTimeout:
          message = 'Timeout g·ª≠i d·ªØ li·ªáu khi $operation';
          errorCode = 'SEND_TIMEOUT';
          break;
        case DioExceptionType.badCertificate:
          message = 'L·ªói SSL Certificate khi $operation';
          errorCode = 'BAD_CERTIFICATE';
          break;
        case DioExceptionType.connectionError:
          message = 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server khi $operation';
          errorCode = 'CONNECTION_ERROR';
          break;
        case DioExceptionType.unknown:
          message = 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi $operation';
          errorCode = 'UNKNOWN_ERROR';
          break;
        default:
          message = 'L·ªói m·∫°ng khi $operation';
          errorCode = 'NETWORK_ERROR';
      }
    }

    return OrderServiceException(
      message: message,
      errorCode: errorCode,
      statusCode: e.response?.statusCode,
    );
  }

  /// Set loading state v√† notify listeners
  void _setLoading(bool loading) {
    if (_isLoading != loading) {
      _isLoading = loading;
      notifyListeners();
    }
  }

  /// Set error message
  void _setError(String? error) {
    _lastError = error;
    notifyListeners();
  }

  /// Clear error message
  void _clearError() {
    if (_lastError != null) {
      _lastError = null;
      notifyListeners();
    }
  }

  /// === ORDER CREATION METHODS ===
  
  /// T·∫°o ƒë∆°n h√†ng m·ªõi
  /// G·ª≠i request l√™n API POST /api/app/orders
  Future<CreateOrderResponse> createOrder(CreateOrderRequest request) async {
    // Validate request
    final validationErrors = request.validate();
    if (validationErrors.isNotEmpty) {
      final errorMessage = 'ƒê∆°n h√†ng kh√¥ng h·ª£p l·ªá:\n${validationErrors.join('\n')}';
      throw OrderServiceException(
        message: errorMessage,
        errorCode: 'VALIDATION_ERROR',
      );
    }

    _setLoading(true);
    _clearError();

    try {
      final response = await _dio.post(
        '/api/app/order',
        data: request.toJson(),
      );
      
      if (response.statusCode == 200 || response.statusCode == 201) {
        final orderResponse = CreateOrderResponse.fromJson(response.data);
        return orderResponse;
      } else {
        throw OrderServiceException(
          message: 'Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ server khi t·∫°o ƒë∆°n h√†ng',
          statusCode: response.statusCode,
        );
      }
    } on DioException catch (e) {
      final exception = _handleDioException(e, 't·∫°o ƒë∆°n h√†ng');
      _setError(exception.message);
      throw exception;
    } catch (e) {
      final message = 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi t·∫°o ƒë∆°n h√†ng: ${e.toString()}';
      _setError(message);
      throw OrderServiceException(message: message, errorCode: 'UNKNOWN_ERROR');
    } finally {
      _setLoading(false);
    }
  }

  @override
  void dispose() {
    // Kh√¥ng close _dio ·ªü ƒë√¢y v√¨ n√≥ ƒë∆∞·ª£c qu·∫£n l√Ω b·ªüi HttpClientService
    super.dispose();
  }
}

/// Exception class cho Order Service
class OrderServiceException implements Exception {
  final String message;
  final String? errorCode;
  final int? statusCode;

  const OrderServiceException({
    required this.message,
    this.errorCode,
    this.statusCode,
  });

  @override
  String toString() {
    return 'OrderServiceException: $message';
  }
}