name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
    paths:
      # Chạy CI khi có thay đổi code hoặc config quan trọng
      - 'aspnet-core/**'
      - 'angular/**' 
      - 'flutter_mobile/**'
      - 'package.json'
      - 'package-lock.json'
      - 'angular/package-lock.json'
      # Loại trừ các file không ảnh hưởng đến build/test
      - '!**/*.md'                     # Documentation files
      - '!docs/**'                     # Documentation folder
      - '!*.yml'                       # YAML files ở root
      - '!*.yaml'                      # YAML files ở root  
      - '!.github/workflows/**'       # GitHub workflow files
      - '!infrastructure/docker/**'   # Docker configs (có workflow riêng)
  pull_request:
    branches: [ main, develop ]
    paths:
      # Tương tự như push
      - 'aspnet-core/**'
      - 'angular/**'
      - 'flutter_mobile/**'
      - 'package.json'
      - 'package-lock.json' 
      - 'angular/package-lock.json'
      - '!**/*.md'
      - '!docs/**'
      - '!*.yml'
      - '!*.yaml'
      - '!.github/workflows/**'
      - '!infrastructure/docker/**'
  workflow_call:
    # Cho phép workflow này được gọi từ workflow khác (như deploy-production.yml)

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: SmartRestaurant_Test

jobs:
  # Build and Lint - Chạy đầu tiên để phát hiện lỗi sớm
  build-and-lint:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'angular/package-lock.json'

    - name: Install .NET format tool
      run: dotnet tool install -g dotnet-format

    - name: Restore .NET dependencies
      run: |
        cd aspnet-core
        dotnet restore SmartRestaurant.sln

    - name: Check .NET code formatting
      run: |
        cd aspnet-core
        dotnet format SmartRestaurant.sln --verify-no-changes

    - name: Build .NET solution
      run: |
        cd aspnet-core
        dotnet build SmartRestaurant.sln --configuration Release --no-restore

    - name: Install Angular dependencies
      run: |
        cd angular
        npm ci

    - name: Lint Angular code
      run: |
        cd angular
        npm run lint

    - name: Build Angular for production
      run: |
        cd angular
        npm run build:prod

  # Backend Tests
  backend-tests:
    runs-on: ubuntu-latest
    needs: [build-and-lint]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5 
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore and build
      run: |
        cd aspnet-core
        dotnet restore SmartRestaurant.sln
        dotnet build SmartRestaurant.sln --configuration Release --no-restore

    - name: Setup test database
      run: |
        cd aspnet-core
        dotnet run --project src/SmartRestaurant.DbMigrator
      env:
        ConnectionStrings__Default: "User ID=${{ env.POSTGRES_USER }};Password=${{ env.POSTGRES_PASSWORD }};Host=localhost;Port=5432;Database=${{ env.POSTGRES_DB }};"

    - name: Run .NET unit tests
      run: |
        cd aspnet-core
        dotnet test SmartRestaurant.sln --configuration Release --no-build --verbosity normal

  # Frontend Tests  
  frontend-tests:
    runs-on: ubuntu-latest
    needs: [build-and-lint]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'angular/package-lock.json'

    - name: Install dependencies
      run: |
        cd angular
        npm ci

    - name: Run Angular unit tests
      run: |
        cd angular
        npm run test:ci
      env:
        CI: true

  # Summary
  ci-summary:
    runs-on: ubuntu-latest
    needs: [build-and-lint, backend-tests, frontend-tests]
    if: always()
    
    steps:
    - name: CI Summary
      run: |
        echo "## 🚀 CI Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build & Lint | ${{ needs.build-and-lint.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Tests | ${{ needs.backend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Tests | ${{ needs.frontend-tests.result }} |" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.build-and-lint.result }}" == "success" && 
              "${{ needs.backend-tests.result }}" == "success" && 
              "${{ needs.frontend-tests.result }}" == "success" ]]; then
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **All CI checks passed!**" >> $GITHUB_STEP_SUMMARY
        else
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Some CI checks failed.**" >> $GITHUB_STEP_SUMMARY
        fi