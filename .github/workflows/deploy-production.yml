name: Deploy SmartRestaurant to Production (chodocquan.site)

on:
  push:
    branches: [production]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: "Force deploy to production"
        required: false
        default: false
        type: boolean
      skip_tests:
        description: "Skip CI tests (not recommended)"
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  run-ci-tests:
    if: ${{ !inputs.skip_tests }}
    uses: ./.github/workflows/ci.yaml
    secrets: inherit

  build-backend:
    needs: [run-ci-tests]
    if: ${{ always() && (needs.run-ci-tests.result == 'success' || needs.run-ci-tests.result == 'skipped' || inputs.skip_tests || inputs.force_deploy) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      api-image: ${{ steps.meta.outputs.tags }}
      deploy_mode: ${{ steps.deploy_mode.outputs.mode }}
      image_ref: ${{ steps.deploy_mode.outputs.image_ref }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Install ABP CLI for backend (best-effort)
        run: |
          set -e
          if ! dotnet tool install -g Volo.Abp.Studio.Cli; then
            dotnet tool install -g Volo.Abp.Cli || true
          fi
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Restore
        run: |
          cd aspnet-core
          dotnet restore SmartRestaurant.sln

      - name: Build
        run: |
          cd aspnet-core
          dotnet build SmartRestaurant.sln --configuration Release --no-restore

      - name: Test
        run: |
          cd aspnet-core
          dotnet test SmartRestaurant.sln --configuration Release --no-build --verbosity normal

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Metadata (API)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=production

      - name: Build & Push API
        id: docker_push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile.api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
        continue-on-error: true

      - name: Build local API fallback
        run: |
          docker build -f ./infrastructure/docker/Dockerfile.api -t smartrestaurant-api:${{ github.sha }} .
          mkdir -p ./build-artifacts
          docker save smartrestaurant-api:${{ github.sha }} > ./build-artifacts/api-image.tar

      - name: Upload API image artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-docker-image
          path: ./build-artifacts/api-image.tar
          retention-days: 1

      - name: Decide deploy mode
        id: deploy_mode
        run: |
          if [[ "${{ steps.docker_push.outcome }}" == "success" ]] && [[ -n "${{ steps.meta.outputs.tags }}" ]]; then
            echo "mode=registry" >> $GITHUB_OUTPUT
            {
              echo 'image_ref<<EOF'
              echo '${{ steps.meta.outputs.tags }}' | head -n1
              echo 'EOF'
            } >> $GITHUB_OUTPUT
          else
            echo "mode=local" >> $GITHUB_OUTPUT
            echo "image_ref=smartrestaurant-api:${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

  build-frontend:
    needs: [run-ci-tests]
    if: ${{ always() && (needs.run-ci-tests.result == 'success' || needs.run-ci-tests.result == 'skipped' || inputs.skip_tests || inputs.force_deploy) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "yarn"
          cache-dependency-path: "angular/yarn.lock"

      - name: Install deps
        run: |
          cd angular
          yarn install --frozen-lockfile

      - name: Lint
        run: |
          cd angular
          yarn lint

      - name: Test
        run: |
          cd angular
          yarn test:ci
        env:
          CI: true

      - name: Build (prod)
        run: |
          cd angular
          yarn build:prod

      - name: Upload dist
        uses: actions/upload-artifact@v4
        with:
          name: angular-dist
          path: angular/dist/
          retention-days: 1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Metadata (Web)
        id: meta-web
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/web
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=production

      - name: Build & Push Web
        id: docker_push_web
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./infrastructure/docker/Dockerfile.web
          target: production
          push: true
          tags: ${{ steps.meta-web.outputs.tags }}
          labels: ${{ steps.meta-web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64
          build-args: |
            BACKEND_BASE_URL=${{ vars.BACKEND_BASE_URL }}
            FRONTEND_BASE_URL=${{ vars.FRONTEND_BASE_URL }}
            WEB_CLIENT_ID=${{ vars.WEB_CLIENT_ID }}
        continue-on-error: true

      - name: Build local Web fallback
        run: |
          docker build -f ./infrastructure/docker/Dockerfile.web \
            --build-arg BACKEND_BASE_URL='${{ vars.BACKEND_BASE_URL }}' \
            --build-arg FRONTEND_BASE_URL='${{ vars.FRONTEND_BASE_URL }}' \
            --build-arg WEB_CLIENT_ID='${{ vars.WEB_CLIENT_ID }}' \
            --target production \
            -t smartrestaurant-web:${{ github.sha }} .

          mkdir -p ./build-artifacts
          docker save smartrestaurant-web:${{ github.sha }} > ./build-artifacts/web-image.tar

      - name: Upload Web image artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-docker-image
          path: ./build-artifacts/web-image.tar
          retention-days: 1

  deploy-production:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    if: ${{ always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production') && (needs.build-backend.result == 'success' && needs.build-frontend.result == 'success') }}
    environment:
      name: production
      url: https://chodocquan.site
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Angular build
        uses: actions/download-artifact@v4
        with:
          name: angular-dist
          path: ./angular-dist

      - name: Download API image backup
        uses: actions/download-artifact@v4
        with:
          name: api-docker-image
          path: ./docker-artifacts

      - name: Download Web image backup
        uses: actions/download-artifact@v4
        with:
          name: web-docker-image
          path: ./docker-artifacts

      - name: Create deployment package
        run: |
          mkdir -p deployment-package
          cp -r infrastructure/ deployment-package/
          [ -d "scripts/" ] && cp -r scripts/ deployment-package/ || true
          find . -maxdepth 1 -type f -name "*.md" -exec cp {} deployment-package/ \; 2>/dev/null || true

      - name: Create backup directories (SSH)
        uses: appleboy/ssh-action@v0.1.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: true
          timeout: 30m
          command_timeout: 10m
          envs: GITHUB_SHA,GITHUB_REF,GITHUB_TOKEN,GITHUB_ACTOR
          debug: false
          script: |
            set -e
            set -x

            echo "[DEPLOY] Starting deployment preparation for SmartRestaurant..."
            echo "[INFO] Validating server connection..."
            whoami
            pwd
            df -h
            echo "[SUCCESS] Server connection validated"

            BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            BACKUP_DIR="/opt/smartrestaurant.backup.${BACKUP_TIMESTAMP}"
            export BACKUP_DIR
            echo "BACKUP_DIR=${BACKUP_DIR}" > /tmp/deployment_vars

            if [ -d "/opt/smartrestaurant" ]; then
              echo "[BACKUP] Creating backup at ${BACKUP_DIR}..."
              sudo mkdir -p "${BACKUP_DIR}"
              echo "[SUCCESS] Backup directory created: ${BACKUP_DIR}"

              sudo cp -r /opt/smartrestaurant "${BACKUP_DIR}"
              echo "[SUCCESS] Application files backed up successfully"

              echo "[BACKUP] Creating database backup..."
              set +e
              PGCONT=$(sudo docker ps -a --format '{{.Names}}' | grep -E '^smartrestaurant_postgres$|postgres|db' | head -n1)
              set -e
              if [ -n "${PGCONT:-}" ]; then
                echo "[INFO] Using Postgres container: $PGCONT"
                set +e
                sudo docker exec "$PGCONT" pg_dump -U postgres SmartRestaurant > "${BACKUP_DIR}/database_backup.sql"
                DUMP_EXIT=$?
                set -e
                if [ $DUMP_EXIT -eq 0 ]; then
                  echo "[SUCCESS] Database backup created at ${BACKUP_DIR}/database_backup.sql"
                else
                  echo "[WARNING] pg_dump inside container failed (exit=$DUMP_EXIT). Skipping DB backup."
                fi
              else
                echo "[WARNING] No postgres-like container found. Skipping DB backup."
              fi

              echo "[BACKUP] Backing up current Docker image..."
              IMAGE="ghcr.io/hungnv-business/smart-restaurant/api:production"
              if sudo docker image inspect "$IMAGE" >/dev/null 2>&1; then
                echo "[BACKUP] Found image: $IMAGE"
                set +e
                sudo docker save "$IMAGE" > "${BACKUP_DIR}/api_image_backup.tar"
                SAVE_EXIT=$?
                set -e
                if [ $SAVE_EXIT -eq 0 ]; then
                  echo "[SUCCESS] API image backup created successfully"
                else
                  echo "[WARNING] Failed to save API image"
                fi
              else
                echo "[INFO] No API image found to backup (first deployment is normal)"
              fi

              echo "[SUCCESS] Backup process completed at ${BACKUP_DIR}"
            else
              echo "[INFO] No existing deployment found, fresh installation"
              sudo mkdir -p "${BACKUP_DIR}" || echo "[WARNING] Could not pre-create backup dir"
              echo "[SUCCESS] Created empty backup directory for first-time installation"
            fi

            echo "[SETUP] Creating VPS directory structure..."
            set +e
            sudo mkdir -p /opt/smartrestaurant
            sudo mkdir -p /opt/smartrestaurant/infrastructure/docker
            sudo mkdir -p /opt/smartrestaurant/logs
            sudo mkdir -p /opt/smartrestaurant/backups
            sudo mkdir -p /opt/smartrestaurant/docker-data/postgres
            sudo mkdir -p /var/www/html
            sudo mkdir -p /etc/letsencrypt
            set -e

            echo "[SETUP] Setting directory permissions..."
            set +e
            sudo chown -R "$USER:$USER" /opt/smartrestaurant
            sudo chown -R www-data:www-data /var/www/html
            sudo chmod -R 755 /var/www/html
            sudo chmod -R 755 /opt/smartrestaurant/logs
            sudo chmod -R 700 /opt/smartrestaurant/backups
            set -e
            echo "[SUCCESS] Directory setup completed"

            cd /opt/smartrestaurant

            DEPLOY_MODE="registry"
            echo "deployment_mode=${DEPLOY_MODE}" >> /tmp/deployment_vars
            echo "[DEPLOY] Using deployment mode: ${DEPLOY_MODE}"

            if [ "${DEPLOY_MODE}" = "registry" ]; then
              echo "[DEPLOY] Pulling latest API image from registry..."
              IMAGE_REF="ghcr.io/hungnv-business/smart-restaurant/api:production"

              if [ -z "${IMAGE_REF:-}" ] || [ "${IMAGE_REF}" = "null" ]; then
                echo "[WARNING] Image ref not set, switching to local mode"
                echo "deployment_mode=local" >> /tmp/deployment_vars
              else
                echo "Using image: ${IMAGE_REF}"
                echo "[DEBUG] GITHUB_TOKEN length: ${#GITHUB_TOKEN}"
                echo "[DEBUG] GITHUB_ACTOR: ${GITHUB_ACTOR}"
                echo "[INFO] Attempting to login to GHCR..."
                set +e
                # Try to login to GitHub Container Registry for private images
                if [ -n "${GITHUB_TOKEN:-}" ] && [ -n "${GITHUB_ACTOR:-}" ]; then
                  echo "${GITHUB_TOKEN}" | sudo docker login ghcr.io -u "${GITHUB_ACTOR}" --password-stdin 2>/dev/null
                  LOGIN_EXIT=$?
                  if [ $LOGIN_EXIT -eq 0 ]; then
                    echo "[SUCCESS] GHCR login successful"
                    if sudo docker pull "${IMAGE_REF}"; then
                      sudo docker tag "${IMAGE_REF}" ghcr.io/hungnv-business/smart-restaurant/api:production || true
                      echo "[SUCCESS] Registry image pulled and tagged successfully"
                    else
                      echo "[WARNING] Failed to pull from registry after login, switching to local mode"
                      echo "deployment_mode=local" >> /tmp/deployment_vars
                    fi
                  else
                    echo "[WARNING] GHCR login failed, trying pull without auth..."
                    if sudo docker pull "${IMAGE_REF}"; then
                      sudo docker tag "${IMAGE_REF}" ghcr.io/hungnv-business/smart-restaurant/api:production || true
                      echo "[SUCCESS] Registry image pulled and tagged successfully"
                    else
                      echo "[WARNING] Failed to pull from registry, switching to local mode"
                      echo "deployment_mode=local" >> /tmp/deployment_vars
                    fi
                  fi
                else
                  echo "[WARNING] GITHUB_TOKEN or GITHUB_ACTOR not available, trying pull without auth..."
                  if sudo docker pull "${IMAGE_REF}"; then
                    sudo docker tag "${IMAGE_REF}" ghcr.io/hungnv-business/smart-restaurant/api:production || true
                    echo "[SUCCESS] Registry image pulled and tagged successfully"
                  else
                    echo "[WARNING] Failed to pull from registry, switching to local mode"
                    echo "deployment_mode=local" >> /tmp/deployment_vars
                  fi
                fi
                set -e
              fi
            else
              echo "[DEPLOY] Local deployment mode: will load image from uploaded artifact"
            fi

            echo "[SUCCESS] Deployment preparation completed"

      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "deployment-package/*"
          target: "/opt/smartrestaurant/"
          strip_components: 1

      - name: Copy API image tar (fallback)
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "docker-artifacts/api-image.tar"
          target: "/opt/smartrestaurant/"
          strip_components: 1

      - name: Copy Web image tar (fallback)
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          source: "docker-artifacts/web-image.tar"
          target: "/opt/smartrestaurant/"
          strip_components: 1

      - name: Deploy with health checks & rollback (SSH)
        id: deploy
        uses: appleboy/ssh-action@v0.1.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script_stop: false
          timeout: 45m
          command_timeout: 15m
          envs: GITHUB_SHA,GITHUB_REF,GITHUB_TOKEN,GITHUB_ACTOR
          script: |
            set +e
            cd /opt/smartrestaurant
            . /tmp/deployment_vars

            rollback_deployment() {
              echo "[ERROR] DEPLOYMENT FAILED - Starting automatic rollback..."
              sudo docker-compose -f infrastructure/docker/docker-compose.yml down --timeout 15 2>/dev/null || true

              if [ -n "$BACKUP_DIR" ] && [ -d "$BACKUP_DIR" ]; then
                echo "[DEPLOY] Restoring from backup: $BACKUP_DIR"
                sudo rm -rf /opt/smartrestaurant
                sudo cp -r "$BACKUP_DIR" /opt/smartrestaurant
                cd /opt/smartrestaurant

                if [ -f "api_image_backup.tar" ]; then
                  echo "[DOCKER] Restoring API Docker image..."
                  sudo docker load < api_image_backup.tar
                fi

                echo "[DEPLOY] Starting restored services..."
                sudo docker-compose -f infrastructure/docker/docker-compose.yml up -d
                sleep 20

                if curl -f http://localhost/health 2>/dev/null; then
                  echo "[SUCCESS] Rollback successful!"
                  echo "rollback_success=true" >> /tmp/deployment_result
                else
                  echo "[ERROR] Rollback failed"
                  echo "rollback_success=false" >> /tmp/deployment_result
                fi
              else
                echo "[ERROR] No backup found"
                echo "rollback_success=false" >> /tmp/deployment_result
              fi

              echo "deployment_success=false" >> /tmp/deployment_result
              return 1
            }

            echo "[DEPLOY] Creating .env file"
            cat > infrastructure/docker/.env << EOF
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            BACKEND_BASE_URL=${{ vars.BACKEND_BASE_URL }}
            FRONTEND_BASE_URL=${{ vars.FRONTEND_BASE_URL }}
            AUTH_REQUIRE_HTTPS=${{ vars.AUTH_REQUIRE_HTTPS }}
            SWAGGER_CLIENT_ID=${{ vars.SWAGGER_CLIENT_ID }}
            ENCRYPTION_PASSPHRASE=${{ secrets.ENCRYPTION_PASSPHRASE }}
            WEB_CLIENT_ID=${{ vars.WEB_CLIENT_ID }}
            EOF
            chmod 600 infrastructure/docker/.env
            sudo chown -R $USER:$USER /opt/smartrestaurant
            sudo chown -R www-data:www-data /var/www/html
            sudo chmod -R 755 /var/www/html

            if [ "${deployment_mode}" = "local" ]; then
              if [ -f "api-image.tar" ]; then
                echo "[DOCKER] Loading local API image..."
                sudo docker load < api-image.tar
                sudo docker tag smartrestaurant-api:${{ github.sha }} ghcr.io/hungnv-business/smart-restaurant/api:production || true
              fi
              if [ -f "web-image.tar" ]; then
                echo "[DOCKER] Loading local Web image..."
                sudo docker load < web-image.tar
                sudo docker tag smartrestaurant-web:${{ github.sha }} ghcr.io/hungnv-business/smart-restaurant/web:production || true
              fi
            fi

            if [ -f "infrastructure/docker/docker-compose.yml" ]; then
              echo "[DEPLOY] Stopping current services..."
              sudo docker-compose -f infrastructure/docker/docker-compose.yml down --timeout 30
            fi

            echo "[DEPLOY] Starting new services..."
            cd /opt/smartrestaurant/infrastructure/docker
            sudo docker-compose up -d

            echo "[DEPLOY] Waiting services..."
            sleep 30

            if ! sudo docker-compose ps | grep -q "Up"; then
              sudo docker-compose logs
              rollback_deployment
              exit 1
            fi

            if ! curl -f http://localhost/health 2>/dev/null; then
              sudo docker-compose logs nginx
              rollback_deployment
              exit 1
            fi

            if ! timeout 60 sh -c 'until curl -f http://localhost/api/health 2>/dev/null; do sleep 5; done'; then
              sudo docker-compose logs api
              rollback_deployment
              exit 1
            fi

            echo "[SUCCESS] All services are healthy!"
            echo "deployment_success=true" >> /tmp/deployment_result
            echo "rollback_success=false" >> /tmp/deployment_result
            sudo docker-compose ps

            echo "[CLEANUP] Old backups..."
            cd /opt
            sudo find . -maxdepth 1 -name "smartrestaurant.backup.*" -type d | sort -r | tail -n +6 | xargs sudo rm -rf 2>/dev/null || true
            exit 0

  post-deploy-check:
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always() && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/production')
    steps:
      - name: Wait stabilize
        run: sleep 60

      - name: External health checks
        id: external_check
        run: |
          set +e
          SITE_OK=false
          API_OK=false
          for i in 1 2 3; do
            if curl -fsS --max-time 10 https://chodocquan.site/health >/dev/null; then SITE_OK=true; break; else sleep 10; fi
          done
          for i in 1 2 3; do
            if curl -fsS --max-time 10 https://chodocquan.site/api/health >/dev/null; then API_OK=true; break; else sleep 10; fi
          done
          echo "site_healthy=$SITE_OK" >> $GITHUB_OUTPUT
          echo "api_healthy=$API_OK" >> $GITHUB_OUTPUT

      - name: Determine final status
        id: status
        run: |
          SITE="${{ steps.external_check.outputs.site_healthy }}"
          API="${{ steps.external_check.outputs.api_healthy }}"
          DEP="${{ needs.deploy-production.result }}"
          if [[ "$SITE" == "true" && "$API" == "true" ]]; then
            echo "final_status=success" >> $GITHUB_OUTPUT
          elif [[ "$DEP" == "success" ]]; then
            echo "final_status=degraded" >> $GITHUB_OUTPUT
          else
            echo "final_status=failed" >> $GITHUB_OUTPUT
          fi

      - name: Report
        run: |
          echo "Final: ${{ steps.status.outputs.final_status }}"