name: Docker Build & Test

on:
  push:
    branches: [ main, develop ]
    paths:
      # Chỉ chạy khi có thay đổi liên quan đến Docker build
      - '**'
      - 'aspnet-core/src/**'           # Source code
      - '!aspnet-core/test/**'         # Loại trừ test projects
      - 'aspnet-core/global.json'
      - 'aspnet-core/*.sln'
      - 'aspnet-core/common.props'
      - 'angular/src/**'               # Bao gồm cả .spec.ts files
      - '!angular/src/**/*.spec.ts'    # Loại trừ test files
      - '!angular/e2e/**'              # Loại trừ e2e tests
      - 'angular/package.json'
      - 'angular/yarn.lock'
      - 'angular/angular.json'
      - 'angular/tsconfig*.json'
      - 'Dockerfile*'
      - '.dockerignore'
  pull_request:
    branches: [ main ]
    paths:
      - '**'
      - 'aspnet-core/src/**'
      - '!aspnet-core/test/**'         # Loại trừ test projects
      - 'angular/src/**'
      - '!angular/src/**/*.spec.ts'    # Loại trừ test files
      - '!angular/e2e/**'              # Loại trừ e2e tests
      - 'Dockerfile*'
  workflow_dispatch:
    # Cho phép chạy manual
  schedule:
    # Chạy weekly build để test
    - cron: '0 4 * * 1'  # Mondays 4:00 AM UTC

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  docker-build-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.api
        target: production
        push: false
        tags: smartrestaurant-api:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Build Web Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.web
        target: production
        push: false
        tags: smartrestaurant-web:test
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64

    - name: Test Docker Compose configurations
      run: |
        # Test docker-compose configuration
        docker compose -f infrastructure/docker/docker-compose.yml config
        echo "✅ Docker compose configuration valid"

    - name: Test container startup
      run: |
        echo "🚀 Testing container startup..."
        
        # Create test .env file
        cat > .env << EOF
        DB_PASSWORD=test_password
        APP_SELF_URL=https://test.com/api
        APP_CLIENT_URL=https://test.com
        APP_CORS_ORIGINS=https://test.com
        APP_REDIRECT_URLS=https://test.com
        AUTH_SERVER_AUTHORITY=https://test.com/api
        AUTH_REQUIRE_HTTPS=false
        SWAGGER_CLIENT_ID=SmartRestaurant_Swagger
        ENCRYPTION_PASSPHRASE=test_encryption_key_32chars_long
        WEB_API_URL=https://test.com/api
        WEB_BASE_URL=https://test.com
        WEB_CLIENT_ID=SmartRestaurant_App
        EOF
        
        # Start containers
        docker compose -f infrastructure/docker/docker-compose.yml up -d postgres
        
        # Wait for postgres health check to pass
        echo "⏳ Waiting for PostgreSQL health check..."
        timeout 60 bash -c 'until docker compose -f infrastructure/docker/docker-compose.yml ps postgres | grep -q "healthy"; do sleep 2; done'
        
        echo "✅ PostgreSQL container started successfully"
        
        # Cleanup
        docker compose -f infrastructure/docker/docker-compose.yml down

  # Security scan for Docker images
  docker-security:
    runs-on: ubuntu-latest
    needs: [docker-build-test]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.api
        target: production
        push: false
        tags: smartrestaurant-api:scan
        load: true

    - name: Run Trivy scan on API image
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: 'smartrestaurant-api:scan'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true

    - name: Build Web image for scanning
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./infrastructure/docker/Dockerfile.web
        target: production
        push: false
        tags: smartrestaurant-web:scan
        load: true

    - name: Run Trivy scan on Web image
      uses: aquasecurity/trivy-action@0.24.0
      with:
        image-ref: 'smartrestaurant-web:scan'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true